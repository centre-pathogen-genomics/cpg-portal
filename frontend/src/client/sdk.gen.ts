// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
  formDataBodySerializer,
} from "@hey-api/client-axios"
import type {
  LoginAccessTokenData,
  LoginAccessTokenResponse,
  LoginAccessTokenError,
  TestTokenData,
  TestTokenResponse,
  RecoverPasswordData,
  RecoverPasswordResponse,
  RecoverPasswordError,
  ResetPasswordData,
  ResetPasswordResponse,
  ResetPasswordError,
  RecoverPasswordHtmlContentData,
  RecoverPasswordHtmlContentResponse,
  RecoverPasswordHtmlContentError,
  ReadUsersData,
  ReadUsersResponse,
  ReadUsersError,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserMeData,
  DeleteUserMeResponse,
  ReadUserMeData,
  ReadUserMeResponse,
  UpdateUserMeData,
  UpdateUserMeResponse,
  UpdateUserMeError,
  UpdatePasswordMeData,
  UpdatePasswordMeResponse,
  UpdatePasswordMeError,
  RegisterUserData,
  RegisterUserResponse,
  RegisterUserError,
  ActivateAccountData,
  ActivateAccountResponse,
  ActivateAccountError,
  DeleteUserData,
  DeleteUserResponse,
  DeleteUserError,
  ReadUserByIdData,
  ReadUserByIdResponse,
  ReadUserByIdError,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  TestEmailData,
  TestEmailResponse,
  TestEmailError,
  HealthCheckData,
  HealthCheckResponse,
  MaxUploadSizeData,
  MaxUploadSizeResponse,
  ReadToolsData,
  ReadToolsResponse,
  ReadToolsError,
  CreateToolData,
  CreateToolResponse,
  CreateToolError,
  ReadToolByNameData,
  ReadToolByNameResponse,
  ReadToolByNameError,
  DeleteToolData,
  DeleteToolResponse,
  DeleteToolError,
  ReadToolData,
  ReadToolResponse,
  ReadToolError,
  UpdateToolData,
  UpdateToolResponse,
  UpdateToolError,
  UnfavouriteToolData,
  UnfavouriteToolResponse,
  UnfavouriteToolError,
  FavouriteToolData,
  FavouriteToolResponse,
  FavouriteToolError,
  EnableToolData,
  EnableToolResponse,
  EnableToolError,
  DisableToolData,
  DisableToolResponse,
  DisableToolError,
  EnableLlmSummaryData,
  EnableLlmSummaryResponse,
  EnableLlmSummaryError,
  DisableLlmSummaryData,
  DisableLlmSummaryResponse,
  DisableLlmSummaryError,
  InstallToolData,
  InstallToolResponse,
  InstallToolError,
  UninstallToolData,
  UninstallToolResponse,
  UninstallToolError,
  DeleteFilesData,
  ReadFilesData,
  ReadFilesResponse,
  ReadFilesError,
  UploadFileData,
  UploadFileResponse,
  UploadFileError,
  GetFilesAllowedTypesData,
  GetFilesAllowedTypesResponse,
  GetFilesStatsData,
  GetFilesStatsResponse,
  CreatePairData,
  CreatePairResponse,
  CreatePairError,
  DeleteFileData,
  DeleteFileError,
  ReadFileData,
  ReadFileResponse,
  ReadFileError,
  SaveFileData,
  SaveFileResponse,
  SaveFileError,
  DownloadFileData,
  DownloadFileError,
  GetDownloadTokenData,
  GetDownloadTokenResponse,
  GetDownloadTokenError,
  DownloadFileWithTokenData,
  DownloadFileWithTokenError,
  DeleteRunsData,
  DeleteRunsResponse,
  ReadRunsData,
  ReadRunsResponse,
  ReadRunsError,
  CreateRunData,
  CreateRunResponse,
  CreateRunError,
  CancelRunsData,
  CancelRunsResponse,
  ReadActiveRunsData,
  ReadActiveRunsResponse,
  ReadActiveRunsError,
  DeleteRunData,
  DeleteRunResponse,
  DeleteRunError,
  ReadRunData,
  ReadRunResponse,
  ReadRunError,
  CancelRunData,
  CancelRunResponse,
  CancelRunError,
  RenameRunData,
  RenameRunResponse,
  RenameRunError,
  GenerateRunSummaryData,
  GenerateRunSummaryResponse,
  GenerateRunSummaryError,
  GetSystemStatsData,
  GetSystemStatsResponse,
  GetStatsSummaryData,
  GetStatsSummaryResponse,
} from "./types.gen"

export const client = createClient(createConfig())

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   */
  public static loginAccessToken<ThrowOnError extends boolean = false>(
    options: Options<LoginAccessTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      LoginAccessTokenResponse,
      LoginAccessTokenError,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      url: "/api/v1/login/access-token",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    })
  }

  /**
   * Test Token
   * Test access token
   */
  public static testToken<ThrowOnError extends boolean = false>(
    options?: Options<TestTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      TestTokenResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/login/test-token",
      ...options,
    })
  }

  /**
   * Recover Password
   * Password Recovery
   */
  public static recoverPassword<ThrowOnError extends boolean = false>(
    options: Options<RecoverPasswordData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      RecoverPasswordResponse,
      RecoverPasswordError,
      ThrowOnError
    >({
      url: "/api/v1/password-recovery/{email}",
      ...options,
    })
  }

  /**
   * Reset Password
   * Reset password
   */
  public static resetPassword<ThrowOnError extends boolean = false>(
    options: Options<ResetPasswordData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      ResetPasswordResponse,
      ResetPasswordError,
      ThrowOnError
    >({
      url: "/api/v1/reset-password/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   */
  public static recoverPasswordHtmlContent<
    ThrowOnError extends boolean = false,
  >(options: Options<RecoverPasswordHtmlContentData, ThrowOnError>) {
    return (options?.client ?? client).post<
      RecoverPasswordHtmlContentResponse,
      RecoverPasswordHtmlContentError,
      ThrowOnError
    >({
      responseType: "text",
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/password-recovery-html-content/{email}",
      ...options,
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   */
  public static readUsers<ThrowOnError extends boolean = false>(
    options?: Options<ReadUsersData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadUsersResponse,
      ReadUsersError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/",
      ...options,
    })
  }

  /**
   * Create User
   * Create new user.
   */
  public static createUser<ThrowOnError extends boolean = false>(
    options: Options<CreateUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      CreateUserResponse,
      CreateUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   */
  public static deleteUserMe<ThrowOnError extends boolean = false>(
    options?: Options<DeleteUserMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteUserMeResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me",
      ...options,
    })
  }

  /**
   * Read User Me
   * Get current user.
   */
  public static readUserMe<ThrowOnError extends boolean = false>(
    options?: Options<ReadUserMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadUserMeResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me",
      ...options,
    })
  }

  /**
   * Update User Me
   * Update own user.
   */
  public static updateUserMe<ThrowOnError extends boolean = false>(
    options: Options<UpdateUserMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UpdateUserMeResponse,
      UpdateUserMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   */
  public static updatePasswordMe<ThrowOnError extends boolean = false>(
    options: Options<UpdatePasswordMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UpdatePasswordMeResponse,
      UpdatePasswordMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me/password",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Register User
   * Register a new inactive user and send them an account activation email.
   */
  public static registerUser<ThrowOnError extends boolean = false>(
    options: Options<RegisterUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      RegisterUserResponse,
      RegisterUserError,
      ThrowOnError
    >({
      url: "/api/v1/users/signup",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Activate Account
   * Activate user account from confirmation email token.
   */
  public static activateAccount<ThrowOnError extends boolean = false>(
    options: Options<ActivateAccountData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ActivateAccountResponse,
      ActivateAccountError,
      ThrowOnError
    >({
      url: "/api/v1/users/activate",
      ...options,
    })
  }

  /**
   * Delete User
   * Delete a user.
   */
  public static deleteUser<ThrowOnError extends boolean = false>(
    options: Options<DeleteUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteUserResponse,
      DeleteUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/{user_id}",
      ...options,
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   */
  public static readUserById<ThrowOnError extends boolean = false>(
    options: Options<ReadUserByIdData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadUserByIdResponse,
      ReadUserByIdError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/{user_id}",
      ...options,
    })
  }

  /**
   * Update User
   * Update a user.
   */
  public static updateUser<ThrowOnError extends boolean = false>(
    options: Options<UpdateUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UpdateUserResponse,
      UpdateUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/{user_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   */
  public static testEmail<ThrowOnError extends boolean = false>(
    options: Options<TestEmailData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      TestEmailResponse,
      TestEmailError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/utils/test-email/",
      ...options,
    })
  }

  /**
   * Health Check
   */
  public static healthCheck<ThrowOnError extends boolean = false>(
    options?: Options<HealthCheckData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      HealthCheckResponse,
      unknown,
      ThrowOnError
    >({
      url: "/api/v1/utils/health-check/",
      ...options,
    })
  }

  /**
   * Max Upload Size
   * Get the maximum upload size.
   */
  public static maxUploadSize<ThrowOnError extends boolean = false>(
    options?: Options<MaxUploadSizeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      MaxUploadSizeResponse,
      unknown,
      ThrowOnError
    >({
      url: "/api/v1/utils/max-upload-size/",
      ...options,
    })
  }
}

export class ToolsService {
  /**
   * Read Tools
   * Retrieve tools with a favourited status for the current user.
   */
  public static readTools<ThrowOnError extends boolean = false>(
    options?: Options<ReadToolsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadToolsResponse,
      ReadToolsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/",
      ...options,
    })
  }

  /**
   * Create Tool
   * Create new tool along with its params.
   */
  public static createTool<ThrowOnError extends boolean = false>(
    options: Options<CreateToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      CreateToolResponse,
      CreateToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Read Tool By Name
   * Retrieve tool by name.
   */
  public static readToolByName<ThrowOnError extends boolean = false>(
    options: Options<ReadToolByNameData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadToolByNameResponse,
      ReadToolByNameError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/name/{tool_name}",
      ...options,
    })
  }

  /**
   * Delete Tool
   * Delete tool by ID.
   */
  public static deleteTool<ThrowOnError extends boolean = false>(
    options: Options<DeleteToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteToolResponse,
      DeleteToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}",
      ...options,
    })
  }

  /**
   * Read Tool
   * Retrieve tool by ID with favourited status.
   */
  public static readTool<ThrowOnError extends boolean = false>(
    options: Options<ReadToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadToolResponse,
      ReadToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}",
      ...options,
    })
  }

  /**
   * Update Tool
   * Update tool by ID.
   */
  public static updateTool<ThrowOnError extends boolean = false>(
    options: Options<UpdateToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UpdateToolResponse,
      UpdateToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Unfavourite Tool
   * Remove a tool from the current user's favourites.
   */
  public static unfavouriteTool<ThrowOnError extends boolean = false>(
    options: Options<UnfavouriteToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      UnfavouriteToolResponse,
      UnfavouriteToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/favourite",
      ...options,
    })
  }

  /**
   * Favourite Tool
   * Add a tool to the current user's favourites.
   */
  public static favouriteTool<ThrowOnError extends boolean = false>(
    options: Options<FavouriteToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      FavouriteToolResponse,
      FavouriteToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/favourite",
      ...options,
    })
  }

  /**
   * Enable Tool
   * Enable a tool by ID.
   */
  public static enableTool<ThrowOnError extends boolean = false>(
    options: Options<EnableToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      EnableToolResponse,
      EnableToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/enable",
      ...options,
    })
  }

  /**
   * Disable Tool
   * Disable a tool by ID.
   */
  public static disableTool<ThrowOnError extends boolean = false>(
    options: Options<DisableToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      DisableToolResponse,
      DisableToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/disable",
      ...options,
    })
  }

  /**
   * Enable Llm Summary
   * Enable a tool by ID.
   */
  public static enableLlmSummary<ThrowOnError extends boolean = false>(
    options: Options<EnableLlmSummaryData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      EnableLlmSummaryResponse,
      EnableLlmSummaryError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/enable_llm_summary",
      ...options,
    })
  }

  /**
   * Disable Llm Summary
   * Disable a tool by ID.
   */
  public static disableLlmSummary<ThrowOnError extends boolean = false>(
    options: Options<DisableLlmSummaryData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      DisableLlmSummaryResponse,
      DisableLlmSummaryError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/disable_llm_summary",
      ...options,
    })
  }

  /**
   * Install Tool
   * Install a tool by ID.
   */
  public static installTool<ThrowOnError extends boolean = false>(
    options: Options<InstallToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      InstallToolResponse,
      InstallToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/install",
      ...options,
    })
  }

  /**
   * Uninstall Tool
   * Uninstall a tool by ID.
   */
  public static uninstallTool<ThrowOnError extends boolean = false>(
    options: Options<UninstallToolData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      UninstallToolResponse,
      UninstallToolError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/tools/{tool_id}/uninstall",
      ...options,
    })
  }
}

export class FilesService {
  /**
   * Delete Files
   * Delete all saved files.
   */
  public static deleteFiles<ThrowOnError extends boolean = false>(
    options?: Options<DeleteFilesData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/",
      ...options,
    })
  }

  /**
   * Read Files
   * Retrieve saved files.
   */
  public static readFiles<ThrowOnError extends boolean = false>(
    options?: Options<ReadFilesData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadFilesResponse,
      ReadFilesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/",
      ...options,
    })
  }

  /**
   * Upload File
   * Upload a new file.
   */
  public static uploadFile<ThrowOnError extends boolean = false>(
    options: Options<UploadFileData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      UploadFileResponse,
      UploadFileError,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/",
      ...options,
      headers: {
        "Content-Type": null,
        ...options?.headers,
      },
    })
  }

  /**
   * Get Files Allowed Types
   * Get allowed file types.
   */
  public static getFilesAllowedTypes<ThrowOnError extends boolean = false>(
    options?: Options<GetFilesAllowedTypesData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetFilesAllowedTypesResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/types",
      ...options,
    })
  }

  /**
   * Get Files Stats
   * Get saved files statistics.
   */
  public static getFilesStats<ThrowOnError extends boolean = false>(
    options?: Options<GetFilesStatsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetFilesStatsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/stats",
      ...options,
    })
  }

  /**
   * Create Pair
   * Create a group of paired-end reads.
   */
  public static createPair<ThrowOnError extends boolean = false>(
    options: Options<CreatePairData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      CreatePairResponse,
      CreatePairError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/pairs",
      ...options,
    })
  }

  /**
   * Delete File
   * Delete file.
   */
  public static deleteFile<ThrowOnError extends boolean = false>(
    options: Options<DeleteFileData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      unknown,
      DeleteFileError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/{id}",
      ...options,
    })
  }

  /**
   * Read File
   * Retrieve file metadata.
   */
  public static readFile<ThrowOnError extends boolean = false>(
    options: Options<ReadFileData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadFileResponse,
      ReadFileError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/{id}",
      ...options,
    })
  }

  /**
   * Save File
   * Save file to My Files.
   */
  public static saveFile<ThrowOnError extends boolean = false>(
    options: Options<SaveFileData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      SaveFileResponse,
      SaveFileError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files{id}/save",
      ...options,
    })
  }

  /**
   * Download File
   * Download file.
   */
  public static downloadFile<ThrowOnError extends boolean = false>(
    options: Options<DownloadFileData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      unknown,
      DownloadFileError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/{id}/download",
      ...options,
    })
  }

  /**
   * Get Download Token
   * Get signed file download token.
   */
  public static getDownloadToken<ThrowOnError extends boolean = false>(
    options: Options<GetDownloadTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetDownloadTokenResponse,
      GetDownloadTokenError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/files/{id}/token",
      ...options,
    })
  }

  /**
   * Download File With Token
   * Download file by token.
   */
  public static downloadFileWithToken<ThrowOnError extends boolean = false>(
    options: Options<DownloadFileWithTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      unknown,
      DownloadFileWithTokenError,
      ThrowOnError
    >({
      url: "/api/v1/files/download/{token}",
      ...options,
    })
  }
}

export class RunsService {
  /**
   * Delete Runs
   * Delete all inactive runs.
   */
  public static deleteRuns<ThrowOnError extends boolean = false>(
    options?: Options<DeleteRunsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteRunsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/",
      ...options,
    })
  }

  /**
   * Read Runs
   * Retrieve runs with optional ordering.
   */
  public static readRuns<ThrowOnError extends boolean = false>(
    options?: Options<ReadRunsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadRunsResponse,
      ReadRunsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/",
      ...options,
    })
  }

  /**
   * Create Run
   * Create and run a run of a specific tool, validating against predefined tool parameters.
   * Accepts both files and regular parameters dynamically.
   */
  public static createRun<ThrowOnError extends boolean = false>(
    options: Options<CreateRunData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      CreateRunResponse,
      CreateRunError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    })
  }

  /**
   * Cancel Runs
   * Cancel all active runs with status pending or running.
   */
  public static cancelRuns<ThrowOnError extends boolean = false>(
    options?: Options<CancelRunsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      CancelRunsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/cancel",
      ...options,
    })
  }

  /**
   * Read Active Runs
   * Retrieve active runs with status pending or running.
   */
  public static readActiveRuns<ThrowOnError extends boolean = false>(
    options?: Options<ReadActiveRunsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadActiveRunsResponse,
      ReadActiveRunsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/active",
      ...options,
    })
  }

  /**
   * Delete Run
   * Delete a specific run by ID.
   */
  public static deleteRun<ThrowOnError extends boolean = false>(
    options: Options<DeleteRunData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteRunResponse,
      DeleteRunError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/{id}",
      ...options,
    })
  }

  /**
   * Read Run
   * Retrieve run metadata.
   */
  public static readRun<ThrowOnError extends boolean = false>(
    options: Options<ReadRunData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReadRunResponse,
      ReadRunError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/{id}",
      ...options,
    })
  }

  /**
   * Cancel Run
   * Cancel run.
   */
  public static cancelRun<ThrowOnError extends boolean = false>(
    options: Options<CancelRunData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      CancelRunResponse,
      CancelRunError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/{id}/cancel",
      ...options,
    })
  }

  /**
   * Rename Run
   * Rename a specific run by ID.
   */
  public static renameRun<ThrowOnError extends boolean = false>(
    options: Options<RenameRunData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      RenameRunResponse,
      RenameRunError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/runs/{id}/rename",
      ...options,
    })
  }
}

export class LlmService {
  /**
   * Generate Run Summary
   * Generate run summary using AI.
   */
  public static generateRunSummary<ThrowOnError extends boolean = false>(
    options: Options<GenerateRunSummaryData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      GenerateRunSummaryResponse,
      GenerateRunSummaryError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/llm/summary/{run_id}",
      ...options,
    })
  }
}

export class StatsService {
  /**
   * Get System Stats
   * Get comprehensive system statistics for admin panel.
   *
   * Returns statistics about users, files, runs, and tools.
   * Requires superuser privileges.
   */
  public static getSystemStats<ThrowOnError extends boolean = false>(
    options?: Options<GetSystemStatsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetSystemStatsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/stats/stats",
      ...options,
    })
  }

  /**
   * Get Stats Summary
   * Get a summary of key system statistics for admin panel.
   *
   * Returns a condensed view of the most important metrics.
   * Requires superuser privileges.
   */
  public static getStatsSummary<ThrowOnError extends boolean = false>(
    options?: Options<GetStatsSummaryData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetStatsSummaryResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/stats/stats/summary",
      ...options,
    })
  }
}
