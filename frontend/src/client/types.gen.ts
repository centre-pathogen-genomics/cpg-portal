// This file is auto-generated by @hey-api/openapi-ts

export type BodyFilesUploadFile = {
  file: Blob | File
}

export type BodyLoginLoginAccessToken = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CondaEnv = {
  name?: string | null
  channels?: Array<string> | null
  dependencies?: Array<string | CondaEnvPipDependency> | null
}

export type CondaEnvPipDependency = {
  pip: Array<string>
}

export type FilePublic = {
  name: string
  file_type?: FileType | null
  size?: number | null
  saved?: boolean
  id: string
  run_id?: string | null
  created_at: string
}

export type FileType = "text" | "image" | "csv" | "tsv" | "json" | "unknown"

export type FilesPublic = {
  data: Array<FilePublic>
  count: number
}

export type FilesStatistics = {
  count: number
  total_size: number
}

export type HttpValidationError = {
  detail?: Array<ValidationError>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type Param = {
  name: string
  param_type: ParamType
  description?: string | null
  default?: number | number | string | boolean | null
  options?: Array<string> | null
  required?: boolean
}

export type ParamType =
  | "str"
  | "int"
  | "float"
  | "bool"
  | "enum"
  | "file"
  | "files"

export type RunPublic = {
  taskiq_id: string
  status: RunStatus
  created_at: string
  started_at: string | null
  finished_at: string | null
  id: string
  owner_id: string
  tool: ToolPublic
  params: {
    [key: string]: unknown
  }
  stderr?: string | null
  stdout?: string | null
  command?: string | null
  files: Array<FilePublic>
}

export type RunPublicMinimal = {
  taskiq_id: string
  status: RunStatus
  created_at: string
  started_at: string | null
  finished_at: string | null
  id: string
  owner_id: string
  tool: ToolPublic
  params: {
    [key: string]: unknown
  }
}

export type RunStatus =
  | "pending"
  | "running"
  | "completed"
  | "failed"
  | "cancelled"

export type RunsPublicMinimal = {
  data: Array<RunPublicMinimal>
  count: number
}

export type SetupFile = {
  name: string
  content: string
}

export type Target = {
  path: string
  target_type: FileType
  required?: boolean
}

export type Token = {
  access_token: string
  token_type?: string
}

export type ToolCreate = {
  name: string
  description?: string | null
  url?: string | null
  image?: string | null
  tags?: Array<string> | null
  favourited_count?: number
  enabled?: boolean
  run_count?: number
  command: string
  conda_env?: CondaEnv | null
  post_install?: string | null
  setup_files?: Array<SetupFile> | null
  params?: Array<Param> | null
  targets?: Array<Target> | null
}

export type ToolPublic = {
  name: string
  description?: string | null
  url?: string | null
  image?: string | null
  tags?: Array<string> | null
  favourited_count?: number
  enabled?: boolean
  run_count?: number
  command: string
  conda_env?: CondaEnv | null
  post_install?: string | null
  setup_files?: Array<SetupFile> | null
  params?: Array<Param> | null
  targets?: Array<Target> | null
  favourited?: boolean
  status: ToolStatus
  installation_log?: string | null
  id: string
}

export type ToolStatus =
  | "uninstalled"
  | "uninstalling"
  | "installed"
  | "installing"
  | "failed"

export type ToolUpdate = {
  name?: string | null
  description?: string | null
  url?: string | null
  image?: string | null
  tags?: Array<string> | null
  favourited_count?: number
  enabled?: boolean
  run_count?: number
  command?: string | null
  conda_env?: CondaEnv | null
  post_install?: string | null
  setup_files?: Array<SetupFile> | null
  params?: Array<Param> | null
  targets?: Array<Target> | null
  status?: ToolStatus | null
}

export type ToolsOrderBy = "created_at" | "run_count"

export type ToolsPublic = {
  data: Array<ToolPublic>
  count: number
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type LoginAccessTokenData = {
  body: BodyLoginLoginAccessToken
  path?: never
  query?: never
  url: "/api/v1/login/access-token"
}

export type LoginAccessTokenErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginAccessTokenError =
  LoginAccessTokenErrors[keyof LoginAccessTokenErrors]

export type LoginAccessTokenResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type LoginAccessTokenResponse =
  LoginAccessTokenResponses[keyof LoginAccessTokenResponses]

export type TestTokenData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/login/test-token"
}

export type TestTokenResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type TestTokenResponse = TestTokenResponses[keyof TestTokenResponses]

export type RecoverPasswordData = {
  body?: never
  path: {
    email: string
  }
  query?: never
  url: "/api/v1/password-recovery/{email}"
}

export type RecoverPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type RecoverPasswordError =
  RecoverPasswordErrors[keyof RecoverPasswordErrors]

export type RecoverPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type RecoverPasswordResponse =
  RecoverPasswordResponses[keyof RecoverPasswordResponses]

export type ResetPasswordData = {
  body: NewPassword
  path?: never
  query?: never
  url: "/api/v1/reset-password/"
}

export type ResetPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors]

export type ResetPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type ResetPasswordResponse =
  ResetPasswordResponses[keyof ResetPasswordResponses]

export type RecoverPasswordHtmlContentData = {
  body?: never
  path: {
    email: string
  }
  query?: never
  url: "/api/v1/password-recovery-html-content/{email}"
}

export type RecoverPasswordHtmlContentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type RecoverPasswordHtmlContentError =
  RecoverPasswordHtmlContentErrors[keyof RecoverPasswordHtmlContentErrors]

export type RecoverPasswordHtmlContentResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type RecoverPasswordHtmlContentResponse =
  RecoverPasswordHtmlContentResponses[keyof RecoverPasswordHtmlContentResponses]

export type ReadUsersData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
  }
  url: "/api/v1/users/"
}

export type ReadUsersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadUsersError = ReadUsersErrors[keyof ReadUsersErrors]

export type ReadUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersPublic
}

export type ReadUsersResponse = ReadUsersResponses[keyof ReadUsersResponses]

export type CreateUserData = {
  body: UserCreate
  path?: never
  query?: never
  url: "/api/v1/users/"
}

export type CreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors]

export type CreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses]

export type DeleteUserMeData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type DeleteUserMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type DeleteUserMeResponse =
  DeleteUserMeResponses[keyof DeleteUserMeResponses]

export type ReadUserMeData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type ReadUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type ReadUserMeResponse = ReadUserMeResponses[keyof ReadUserMeResponses]

export type UpdateUserMeData = {
  body: UserUpdateMe
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UpdateUserMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateUserMeError = UpdateUserMeErrors[keyof UpdateUserMeErrors]

export type UpdateUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UpdateUserMeResponse =
  UpdateUserMeResponses[keyof UpdateUserMeResponses]

export type UpdatePasswordMeData = {
  body: UpdatePassword
  path?: never
  query?: never
  url: "/api/v1/users/me/password"
}

export type UpdatePasswordMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdatePasswordMeError =
  UpdatePasswordMeErrors[keyof UpdatePasswordMeErrors]

export type UpdatePasswordMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UpdatePasswordMeResponse =
  UpdatePasswordMeResponses[keyof UpdatePasswordMeResponses]

export type RegisterUserData = {
  body: UserRegister
  path?: never
  query?: never
  url: "/api/v1/users/signup"
}

export type RegisterUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors]

export type RegisterUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type RegisterUserResponse =
  RegisterUserResponses[keyof RegisterUserResponses]

export type DeleteUserData = {
  body?: never
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type DeleteUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors]

export type DeleteUserResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses]

export type ReadUserByIdData = {
  body?: never
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type ReadUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadUserByIdError = ReadUserByIdErrors[keyof ReadUserByIdErrors]

export type ReadUserByIdResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type ReadUserByIdResponse =
  ReadUserByIdResponses[keyof ReadUserByIdResponses]

export type UpdateUserData = {
  body: UserUpdate
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UpdateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors]

export type UpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses]

export type TestEmailData = {
  body?: never
  path?: never
  query: {
    email_to: string
  }
  url: "/api/v1/utils/test-email/"
}

export type TestEmailErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type TestEmailError = TestEmailErrors[keyof TestEmailErrors]

export type TestEmailResponses = {
  /**
   * Successful Response
   */
  201: Message
}

export type TestEmailResponse = TestEmailResponses[keyof TestEmailResponses]

export type HealthCheckData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/utils/health-check/"
}

export type HealthCheckResponses = {
  /**
   * Successful Response
   */
  200: boolean
}

export type HealthCheckResponse =
  HealthCheckResponses[keyof HealthCheckResponses]

export type ReadToolsData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
    order_by?: ToolsOrderBy
    show_favourites?: boolean
  }
  url: "/api/v1/tools/"
}

export type ReadToolsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadToolsError = ReadToolsErrors[keyof ReadToolsErrors]

export type ReadToolsResponses = {
  /**
   * Successful Response
   */
  200: ToolsPublic
}

export type ReadToolsResponse = ReadToolsResponses[keyof ReadToolsResponses]

export type CreateToolData = {
  body: ToolCreate
  path?: never
  query?: never
  url: "/api/v1/tools/"
}

export type CreateToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateToolError = CreateToolErrors[keyof CreateToolErrors]

export type CreateToolResponses = {
  /**
   * Successful Response
   */
  200: ToolPublic
}

export type CreateToolResponse = CreateToolResponses[keyof CreateToolResponses]

export type DeleteToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}"
}

export type DeleteToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteToolError = DeleteToolErrors[keyof DeleteToolErrors]

export type DeleteToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type DeleteToolResponse = DeleteToolResponses[keyof DeleteToolResponses]

export type ReadToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}"
}

export type ReadToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadToolError = ReadToolErrors[keyof ReadToolErrors]

export type ReadToolResponses = {
  /**
   * Successful Response
   */
  200: ToolPublic
}

export type ReadToolResponse = ReadToolResponses[keyof ReadToolResponses]

export type UpdateToolData = {
  body: ToolUpdate
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}"
}

export type UpdateToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateToolError = UpdateToolErrors[keyof UpdateToolErrors]

export type UpdateToolResponses = {
  /**
   * Successful Response
   */
  200: ToolPublic
}

export type UpdateToolResponse = UpdateToolResponses[keyof UpdateToolResponses]

export type UnfavouriteToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}/favourite"
}

export type UnfavouriteToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UnfavouriteToolError =
  UnfavouriteToolErrors[keyof UnfavouriteToolErrors]

export type UnfavouriteToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UnfavouriteToolResponse =
  UnfavouriteToolResponses[keyof UnfavouriteToolResponses]

export type FavouriteToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}/favourite"
}

export type FavouriteToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type FavouriteToolError = FavouriteToolErrors[keyof FavouriteToolErrors]

export type FavouriteToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type FavouriteToolResponse =
  FavouriteToolResponses[keyof FavouriteToolResponses]

export type ReadToolByNameData = {
  body?: never
  path: {
    tool_name: string
  }
  query?: never
  url: "/api/v1/tools/name/{tool_name}"
}

export type ReadToolByNameErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadToolByNameError =
  ReadToolByNameErrors[keyof ReadToolByNameErrors]

export type ReadToolByNameResponses = {
  /**
   * Successful Response
   */
  200: ToolPublic
}

export type ReadToolByNameResponse =
  ReadToolByNameResponses[keyof ReadToolByNameResponses]

export type EnableToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}/enable"
}

export type EnableToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type EnableToolError = EnableToolErrors[keyof EnableToolErrors]

export type EnableToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type EnableToolResponse = EnableToolResponses[keyof EnableToolResponses]

export type DisableToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}/disable"
}

export type DisableToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DisableToolError = DisableToolErrors[keyof DisableToolErrors]

export type DisableToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type DisableToolResponse =
  DisableToolResponses[keyof DisableToolResponses]

export type InstallToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}/install"
}

export type InstallToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type InstallToolError = InstallToolErrors[keyof InstallToolErrors]

export type InstallToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type InstallToolResponse =
  InstallToolResponses[keyof InstallToolResponses]

export type UninstallToolData = {
  body?: never
  path: {
    tool_id: string
  }
  query?: never
  url: "/api/v1/tools/{tool_id}/uninstall"
}

export type UninstallToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UninstallToolError = UninstallToolErrors[keyof UninstallToolErrors]

export type UninstallToolResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UninstallToolResponse =
  UninstallToolResponses[keyof UninstallToolResponses]

export type DeleteFilesData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/files/"
}

export type DeleteFilesResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ReadFilesData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
    order_by?: string
  }
  url: "/api/v1/files/"
}

export type ReadFilesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadFilesError = ReadFilesErrors[keyof ReadFilesErrors]

export type ReadFilesResponses = {
  /**
   * Successful Response
   */
  200: FilesPublic
}

export type ReadFilesResponse = ReadFilesResponses[keyof ReadFilesResponses]

export type UploadFileData = {
  body: BodyFilesUploadFile
  path?: never
  query?: never
  url: "/api/v1/files/"
}

export type UploadFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UploadFileError = UploadFileErrors[keyof UploadFileErrors]

export type UploadFileResponses = {
  /**
   * Successful Response
   */
  200: FilePublic
}

export type UploadFileResponse = UploadFileResponses[keyof UploadFileResponses]

export type GetFilesStatsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/files/stats"
}

export type GetFilesStatsResponses = {
  /**
   * Successful Response
   */
  200: FilesStatistics
}

export type GetFilesStatsResponse =
  GetFilesStatsResponses[keyof GetFilesStatsResponses]

export type DeleteFileData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/files/{id}"
}

export type DeleteFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteFileError = DeleteFileErrors[keyof DeleteFileErrors]

export type DeleteFileResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ReadFileData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/files/{id}"
}

export type ReadFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadFileError = ReadFileErrors[keyof ReadFileErrors]

export type ReadFileResponses = {
  /**
   * Successful Response
   */
  200: FilePublic
}

export type ReadFileResponse = ReadFileResponses[keyof ReadFileResponses]

export type SaveFileData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/files{id}/save"
}

export type SaveFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SaveFileError = SaveFileErrors[keyof SaveFileErrors]

export type SaveFileResponses = {
  /**
   * Successful Response
   */
  200: FilePublic
}

export type SaveFileResponse = SaveFileResponses[keyof SaveFileResponses]

export type DownloadFileData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/files/{id}/download"
}

export type DownloadFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DownloadFileError = DownloadFileErrors[keyof DownloadFileErrors]

export type DownloadFileResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetDownloadTokenData = {
  body?: never
  path: {
    id: string
  }
  query?: {
    minutes?: number
  }
  url: "/api/v1/files/{id}/token"
}

export type GetDownloadTokenErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetDownloadTokenError =
  GetDownloadTokenErrors[keyof GetDownloadTokenErrors]

export type GetDownloadTokenResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type GetDownloadTokenResponse =
  GetDownloadTokenResponses[keyof GetDownloadTokenResponses]

export type DownloadFileWithTokenData = {
  body?: never
  path: {
    token: string
  }
  query?: never
  url: "/api/v1/files/download/{token}"
}

export type DownloadFileWithTokenErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DownloadFileWithTokenError =
  DownloadFileWithTokenErrors[keyof DownloadFileWithTokenErrors]

export type DownloadFileWithTokenResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type DeleteRunsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/runs/"
}

export type DeleteRunsResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type DeleteRunsResponse = DeleteRunsResponses[keyof DeleteRunsResponses]

export type ReadRunsData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
    order_by?: string
  }
  url: "/api/v1/runs/"
}

export type ReadRunsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadRunsError = ReadRunsErrors[keyof ReadRunsErrors]

export type ReadRunsResponses = {
  /**
   * Successful Response
   */
  200: RunsPublicMinimal
}

export type ReadRunsResponse = ReadRunsResponses[keyof ReadRunsResponses]

export type CreateRunData = {
  body: {
    [key: string]: unknown
  }
  path?: never
  query: {
    tool_id: string
  }
  url: "/api/v1/runs/"
}

export type CreateRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateRunError = CreateRunErrors[keyof CreateRunErrors]

export type CreateRunResponses = {
  /**
   * Successful Response
   */
  200: RunPublic
}

export type CreateRunResponse = CreateRunResponses[keyof CreateRunResponses]

export type CancelRunsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/runs/cancel"
}

export type CancelRunsResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type CancelRunsResponse = CancelRunsResponses[keyof CancelRunsResponses]

export type ReadActiveRunsData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
  }
  url: "/api/v1/runs/active"
}

export type ReadActiveRunsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadActiveRunsError =
  ReadActiveRunsErrors[keyof ReadActiveRunsErrors]

export type ReadActiveRunsResponses = {
  /**
   * Successful Response
   */
  200: RunsPublicMinimal
}

export type ReadActiveRunsResponse =
  ReadActiveRunsResponses[keyof ReadActiveRunsResponses]

export type DeleteRunData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/runs/{id}"
}

export type DeleteRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteRunError = DeleteRunErrors[keyof DeleteRunErrors]

export type DeleteRunResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type DeleteRunResponse = DeleteRunResponses[keyof DeleteRunResponses]

export type ReadRunData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/runs/{id}"
}

export type ReadRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ReadRunError = ReadRunErrors[keyof ReadRunErrors]

export type ReadRunResponses = {
  /**
   * Successful Response
   */
  200: RunPublic
}

export type ReadRunResponse = ReadRunResponses[keyof ReadRunResponses]

export type CancelRunData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/runs/{id}/cancel"
}

export type CancelRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CancelRunError = CancelRunErrors[keyof CancelRunErrors]

export type CancelRunResponses = {
  /**
   * Successful Response
   */
  200: RunPublic
}

export type CancelRunResponse = CancelRunResponses[keyof CancelRunResponses]
