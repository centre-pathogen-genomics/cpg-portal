// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-axios"
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query"
import type {
  LoginAccessTokenData,
  LoginAccessTokenError,
  LoginAccessTokenResponse,
  TestTokenData,
  TestTokenResponse,
  RecoverPasswordData,
  RecoverPasswordError,
  RecoverPasswordResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  RecoverPasswordHtmlContentData,
  RecoverPasswordHtmlContentError,
  RecoverPasswordHtmlContentResponse,
  ReadUsersData,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteUserMeData,
  DeleteUserMeResponse,
  ReadUserMeData,
  UpdateUserMeData,
  UpdateUserMeError,
  UpdateUserMeResponse,
  UpdatePasswordMeData,
  UpdatePasswordMeError,
  UpdatePasswordMeResponse,
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  ReadUserByIdData,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  TestEmailData,
  TestEmailError,
  TestEmailResponse,
  HealthCheckData,
  ReadToolsData,
  CreateToolData,
  CreateToolError,
  CreateToolResponse,
  DeleteToolData,
  DeleteToolError,
  DeleteToolResponse,
  ReadToolData,
  UpdateToolData,
  UpdateToolError,
  UpdateToolResponse,
  UnfavouriteToolData,
  UnfavouriteToolError,
  UnfavouriteToolResponse,
  FavouriteToolData,
  FavouriteToolError,
  FavouriteToolResponse,
  ReadToolByNameData,
  ReadToolParamsData,
  AddParamToToolData,
  AddParamToToolError,
  AddParamToToolResponse,
  DeleteParamFromToolData,
  DeleteParamFromToolError,
  DeleteParamFromToolResponse,
  UpdateParamInToolData,
  UpdateParamInToolError,
  UpdateParamInToolResponse,
  ReadToolTargetsData,
  AddTargetToToolData,
  AddTargetToToolError,
  AddTargetToToolResponse,
  DeleteTargetFromToolData,
  DeleteTargetFromToolError,
  DeleteTargetFromToolResponse,
  UpdateTargetInToolData,
  UpdateTargetInToolError,
  UpdateTargetInToolResponse,
  DeleteFilesData,
  ReadFilesData,
  UploadFileData,
  UploadFileError,
  UploadFileResponse,
  GetFilesStatsData,
  DeleteFileData,
  DeleteFileError,
  ReadFileData,
  DownloadFileData,
  GetDownloadTokenData,
  DownloadFileWithTokenData,
  DeleteRunsData,
  DeleteRunsResponse,
  ReadRunsData,
  CreateRunData,
  CreateRunError,
  CreateRunResponse,
  CancelRunsData,
  CancelRunsResponse,
  ReadActiveRunsData,
  DeleteRunData,
  DeleteRunError,
  DeleteRunResponse,
  ReadRunData,
  CancelRunData,
  CancelRunError,
  CancelRunResponse,
} from "../types.gen"
import type { AxiosError } from "axios"
import {
  LoginService,
  UsersService,
  UtilsService,
  ToolsService,
  FilesService,
  RunsService,
  client,
} from "../sdk.gen"

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const loginAccessTokenQueryKey = (
  options: Options<LoginAccessTokenData>,
) => [createQueryKey("loginAccessToken", options)]

export const loginAccessTokenOptions = (
  options: Options<LoginAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.loginAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginAccessTokenQueryKey(options),
  })
}

export const loginAccessTokenMutation = (
  options?: Partial<Options<LoginAccessTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginAccessTokenResponse,
    AxiosError<LoginAccessTokenError>,
    Options<LoginAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.loginAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const testTokenQueryKey = (options?: Options<TestTokenData>) => [
  createQueryKey("testToken", options),
]

export const testTokenOptions = (options?: Options<TestTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.testToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testTokenQueryKey(options),
  })
}

export const testTokenMutation = (
  options?: Partial<Options<TestTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TestTokenResponse,
    AxiosError<DefaultError>,
    Options<TestTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.testToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const recoverPasswordQueryKey = (
  options: Options<RecoverPasswordData>,
) => [createQueryKey("recoverPassword", options)]

export const recoverPasswordOptions = (
  options: Options<RecoverPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.recoverPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: recoverPasswordQueryKey(options),
  })
}

export const recoverPasswordMutation = (
  options?: Partial<Options<RecoverPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RecoverPasswordResponse,
    AxiosError<RecoverPasswordError>,
    Options<RecoverPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.recoverPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) => [
  createQueryKey("resetPassword", options),
]

export const resetPasswordOptions = (options: Options<ResetPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: resetPasswordQueryKey(options),
  })
}

export const resetPasswordMutation = (
  options?: Partial<Options<ResetPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    AxiosError<ResetPasswordError>,
    Options<ResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const recoverPasswordHtmlContentQueryKey = (
  options: Options<RecoverPasswordHtmlContentData>,
) => [createQueryKey("recoverPasswordHtmlContent", options)]

export const recoverPasswordHtmlContentOptions = (
  options: Options<RecoverPasswordHtmlContentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.recoverPasswordHtmlContent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: recoverPasswordHtmlContentQueryKey(options),
  })
}

export const recoverPasswordHtmlContentMutation = (
  options?: Partial<Options<RecoverPasswordHtmlContentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RecoverPasswordHtmlContentResponse,
    AxiosError<RecoverPasswordHtmlContentError>,
    Options<RecoverPasswordHtmlContentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.recoverPasswordHtmlContent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUsersQueryKey = (options?: Options<ReadUsersData>) => [
  createQueryKey("readUsers", options),
]

export const readUsersOptions = (options?: Options<ReadUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.readUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUsersQueryKey(options),
  })
}

export const createUserQueryKey = (options: Options<CreateUserData>) => [
  createQueryKey("createUser", options),
]

export const createUserOptions = (options: Options<CreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createUserQueryKey(options),
  })
}

export const createUserMutation = (
  options?: Partial<Options<CreateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateUserResponse,
    AxiosError<CreateUserError>,
    Options<CreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteUserMeMutation = (
  options?: Partial<Options<DeleteUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteUserMeResponse,
    AxiosError<DefaultError>,
    Options<DeleteUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.deleteUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUserMeQueryKey = (options?: Options<ReadUserMeData>) => [
  createQueryKey("readUserMe", options),
]

export const readUserMeOptions = (options?: Options<ReadUserMeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.readUserMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUserMeQueryKey(options),
  })
}

export const updateUserMeMutation = (
  options?: Partial<Options<UpdateUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateUserMeResponse,
    AxiosError<UpdateUserMeError>,
    Options<UpdateUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.updateUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updatePasswordMeMutation = (
  options?: Partial<Options<UpdatePasswordMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdatePasswordMeResponse,
    AxiosError<UpdatePasswordMeError>,
    Options<UpdatePasswordMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.updatePasswordMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const registerUserQueryKey = (options: Options<RegisterUserData>) => [
  createQueryKey("registerUser", options),
]

export const registerUserOptions = (options: Options<RegisterUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.registerUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: registerUserQueryKey(options),
  })
}

export const registerUserMutation = (
  options?: Partial<Options<RegisterUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RegisterUserResponse,
    AxiosError<RegisterUserError>,
    Options<RegisterUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.registerUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteUserMutation = (
  options?: Partial<Options<DeleteUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteUserResponse,
    AxiosError<DeleteUserError>,
    Options<DeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.deleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUserByIdQueryKey = (options: Options<ReadUserByIdData>) => [
  createQueryKey("readUserById", options),
]

export const readUserByIdOptions = (options: Options<ReadUserByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.readUserById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUserByIdQueryKey(options),
  })
}

export const updateUserMutation = (
  options?: Partial<Options<UpdateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateUserResponse,
    AxiosError<UpdateUserError>,
    Options<UpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.updateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const testEmailQueryKey = (options: Options<TestEmailData>) => [
  createQueryKey("testEmail", options),
]

export const testEmailOptions = (options: Options<TestEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UtilsService.testEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testEmailQueryKey(options),
  })
}

export const testEmailMutation = (
  options?: Partial<Options<TestEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TestEmailResponse,
    AxiosError<TestEmailError>,
    Options<TestEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UtilsService.testEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const healthCheckQueryKey = (options?: Options<HealthCheckData>) => [
  createQueryKey("healthCheck", options),
]

export const healthCheckOptions = (options?: Options<HealthCheckData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UtilsService.healthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: healthCheckQueryKey(options),
  })
}

export const readToolsQueryKey = (options?: Options<ReadToolsData>) => [
  createQueryKey("readTools", options),
]

export const readToolsOptions = (options?: Options<ReadToolsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.readTools({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readToolsQueryKey(options),
  })
}

export const createToolQueryKey = (options: Options<CreateToolData>) => [
  createQueryKey("createTool", options),
]

export const createToolOptions = (options: Options<CreateToolData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.createTool({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createToolQueryKey(options),
  })
}

export const createToolMutation = (
  options?: Partial<Options<CreateToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateToolResponse,
    AxiosError<CreateToolError>,
    Options<CreateToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.createTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteToolMutation = (
  options?: Partial<Options<DeleteToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteToolResponse,
    AxiosError<DeleteToolError>,
    Options<DeleteToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.deleteTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readToolQueryKey = (options: Options<ReadToolData>) => [
  createQueryKey("readTool", options),
]

export const readToolOptions = (options: Options<ReadToolData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.readTool({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readToolQueryKey(options),
  })
}

export const updateToolMutation = (
  options?: Partial<Options<UpdateToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateToolResponse,
    AxiosError<UpdateToolError>,
    Options<UpdateToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.updateTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const unfavouriteToolMutation = (
  options?: Partial<Options<UnfavouriteToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UnfavouriteToolResponse,
    AxiosError<UnfavouriteToolError>,
    Options<UnfavouriteToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.unfavouriteTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const favouriteToolQueryKey = (options: Options<FavouriteToolData>) => [
  createQueryKey("favouriteTool", options),
]

export const favouriteToolOptions = (options: Options<FavouriteToolData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.favouriteTool({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: favouriteToolQueryKey(options),
  })
}

export const favouriteToolMutation = (
  options?: Partial<Options<FavouriteToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    FavouriteToolResponse,
    AxiosError<FavouriteToolError>,
    Options<FavouriteToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.favouriteTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readToolByNameQueryKey = (
  options: Options<ReadToolByNameData>,
) => [createQueryKey("readToolByName", options)]

export const readToolByNameOptions = (options: Options<ReadToolByNameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.readToolByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readToolByNameQueryKey(options),
  })
}

export const readToolParamsQueryKey = (
  options: Options<ReadToolParamsData>,
) => [createQueryKey("readToolParams", options)]

export const readToolParamsOptions = (options: Options<ReadToolParamsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.readToolParams({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readToolParamsQueryKey(options),
  })
}

export const addParamToToolQueryKey = (
  options: Options<AddParamToToolData>,
) => [createQueryKey("addParamToTool", options)]

export const addParamToToolOptions = (options: Options<AddParamToToolData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.addParamToTool({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addParamToToolQueryKey(options),
  })
}

export const addParamToToolMutation = (
  options?: Partial<Options<AddParamToToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AddParamToToolResponse,
    AxiosError<AddParamToToolError>,
    Options<AddParamToToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.addParamToTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteParamFromToolMutation = (
  options?: Partial<Options<DeleteParamFromToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteParamFromToolResponse,
    AxiosError<DeleteParamFromToolError>,
    Options<DeleteParamFromToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.deleteParamFromTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateParamInToolMutation = (
  options?: Partial<Options<UpdateParamInToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateParamInToolResponse,
    AxiosError<UpdateParamInToolError>,
    Options<UpdateParamInToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.updateParamInTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readToolTargetsQueryKey = (
  options: Options<ReadToolTargetsData>,
) => [createQueryKey("readToolTargets", options)]

export const readToolTargetsOptions = (
  options: Options<ReadToolTargetsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.readToolTargets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readToolTargetsQueryKey(options),
  })
}

export const addTargetToToolQueryKey = (
  options: Options<AddTargetToToolData>,
) => [createQueryKey("addTargetToTool", options)]

export const addTargetToToolOptions = (
  options: Options<AddTargetToToolData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ToolsService.addTargetToTool({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addTargetToToolQueryKey(options),
  })
}

export const addTargetToToolMutation = (
  options?: Partial<Options<AddTargetToToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AddTargetToToolResponse,
    AxiosError<AddTargetToToolError>,
    Options<AddTargetToToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.addTargetToTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteTargetFromToolMutation = (
  options?: Partial<Options<DeleteTargetFromToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteTargetFromToolResponse,
    AxiosError<DeleteTargetFromToolError>,
    Options<DeleteTargetFromToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.deleteTargetFromTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateTargetInToolMutation = (
  options?: Partial<Options<UpdateTargetInToolData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateTargetInToolResponse,
    AxiosError<UpdateTargetInToolError>,
    Options<UpdateTargetInToolData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ToolsService.updateTargetInTool({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteFilesMutation = (
  options?: Partial<Options<DeleteFilesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<DeleteFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await FilesService.deleteFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readFilesQueryKey = (options?: Options<ReadFilesData>) => [
  createQueryKey("readFiles", options),
]

export const readFilesOptions = (options?: Options<ReadFilesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.readFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readFilesQueryKey(options),
  })
}

export const uploadFileQueryKey = (options: Options<UploadFileData>) => [
  createQueryKey("uploadFile", options),
]

export const uploadFileOptions = (options: Options<UploadFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.uploadFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: uploadFileQueryKey(options),
  })
}

export const uploadFileMutation = (
  options?: Partial<Options<UploadFileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UploadFileResponse,
    AxiosError<UploadFileError>,
    Options<UploadFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await FilesService.uploadFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getFilesStatsQueryKey = (options?: Options<GetFilesStatsData>) => [
  createQueryKey("getFilesStats", options),
]

export const getFilesStatsOptions = (options?: Options<GetFilesStatsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.getFilesStats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getFilesStatsQueryKey(options),
  })
}

export const deleteFileMutation = (
  options?: Partial<Options<DeleteFileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DeleteFileError>,
    Options<DeleteFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await FilesService.deleteFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readFileQueryKey = (options: Options<ReadFileData>) => [
  createQueryKey("readFile", options),
]

export const readFileOptions = (options: Options<ReadFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.readFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readFileQueryKey(options),
  })
}

export const downloadFileQueryKey = (options: Options<DownloadFileData>) => [
  createQueryKey("downloadFile", options),
]

export const downloadFileOptions = (options: Options<DownloadFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.downloadFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: downloadFileQueryKey(options),
  })
}

export const getDownloadTokenQueryKey = (
  options: Options<GetDownloadTokenData>,
) => [createQueryKey("getDownloadToken", options)]

export const getDownloadTokenOptions = (
  options: Options<GetDownloadTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.getDownloadToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getDownloadTokenQueryKey(options),
  })
}

export const downloadFileWithTokenQueryKey = (
  options: Options<DownloadFileWithTokenData>,
) => [createQueryKey("downloadFileWithToken", options)]

export const downloadFileWithTokenOptions = (
  options: Options<DownloadFileWithTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await FilesService.downloadFileWithToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: downloadFileWithTokenQueryKey(options),
  })
}

export const deleteRunsMutation = (
  options?: Partial<Options<DeleteRunsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteRunsResponse,
    AxiosError<DefaultError>,
    Options<DeleteRunsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await RunsService.deleteRuns({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readRunsQueryKey = (options?: Options<ReadRunsData>) => [
  createQueryKey("readRuns", options),
]

export const readRunsOptions = (options?: Options<ReadRunsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RunsService.readRuns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readRunsQueryKey(options),
  })
}

export const createRunQueryKey = (options: Options<CreateRunData>) => [
  createQueryKey("createRun", options),
]

export const createRunOptions = (options: Options<CreateRunData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RunsService.createRun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createRunQueryKey(options),
  })
}

export const createRunMutation = (
  options?: Partial<Options<CreateRunData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateRunResponse,
    AxiosError<CreateRunError>,
    Options<CreateRunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await RunsService.createRun({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const cancelRunsMutation = (
  options?: Partial<Options<CancelRunsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CancelRunsResponse,
    AxiosError<DefaultError>,
    Options<CancelRunsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await RunsService.cancelRuns({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readActiveRunsQueryKey = (
  options?: Options<ReadActiveRunsData>,
) => [createQueryKey("readActiveRuns", options)]

export const readActiveRunsOptions = (
  options?: Options<ReadActiveRunsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RunsService.readActiveRuns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readActiveRunsQueryKey(options),
  })
}

export const deleteRunMutation = (
  options?: Partial<Options<DeleteRunData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteRunResponse,
    AxiosError<DeleteRunError>,
    Options<DeleteRunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await RunsService.deleteRun({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readRunQueryKey = (options: Options<ReadRunData>) => [
  createQueryKey("readRun", options),
]

export const readRunOptions = (options: Options<ReadRunData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RunsService.readRun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readRunQueryKey(options),
  })
}

export const cancelRunMutation = (
  options?: Partial<Options<CancelRunData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CancelRunResponse,
    AxiosError<CancelRunError>,
    Options<CancelRunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await RunsService.cancelRun({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
